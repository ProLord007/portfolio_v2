/*------------------------------------*\
#GRIDS - in viewports with backup in %
// SUPPORT:  vw || vh (no use of vmax)
IE9+
Edge
Android 4.4+
Firefox, Chrome,

On mobile / phablet, vw or % don't have any difference.
On lap/desktop the grid with % may be a little different
but completly fine for old people :'D

\*------------------------------------*/

/*------------------------------------*\
%placeholder SELECTOR width

I did a grid system with % placeholders,
what contains a width: $x%;
Each one for each media querie.

That way you can @extend with no problems,
and don't create a full grid with class
that aren't even used.

%col-*      --> mobile first
%colPha-*   --> @media >=phablet
%colTab-*   --> @media >=tablet
%colLap-*   --> @media >=laptop
%colDes-*   --> @media >=desktop
\*------------------------------------*/

$columns: 8;
@for $i from 1 through $columns {
    %col-#{$i}-#{$columns} {
        width: percentage($i / $columns); // poor browsers
        width: ($i / $columns * 100vw);
    }
}

$colDevices:    (OnlyPha, onlyPhablet),
                (OnlyTa, onlyTablet),
                (Pha, phablet),
                (Tab, tablet),
                (Lap, laptop);

@each $className, $media in $colDevices {
    @include media($media) {
        @for $i from 1 through $columns {
            %col#{$className}-#{$i}-#{$columns} {
                width: percentage($i / $columns); // poor browsers
                width: ($i / $columns * 100vw);
            }
        }
    }
}


/*------------------------------------*\
@function value

if you need to use a grid % on something
(ex padding), just call the function.

\*------------------------------------*/

@mixin grid8Prop($prop, $col) {
    //8 ------ 100
    //$col --- @return
    #{$prop}: percentage($col/$columns); // poor browsers
    #{$prop}: ($col/$columns * 100vw);
}

// .foo {
//     @include grid8Prop(padding-right, 1);
// }
// --> padding-right: 12.5%; padding-right: 12.5vw
